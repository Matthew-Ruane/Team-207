// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.commands.commandgroups.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.BBPOVButton;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

//import org.usfirst.frc330.commands.commandgroups.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shiftLow_1;
    public JoystickButton openClaw_2;
    public Joystick driverL;
    public JoystickButton shiftHigh_1;
    public JoystickButton deployCube__2;
    public JoystickButton twoButtonPlatformDeploy_45;
    public JoystickButton alignReady_release_10;
    public JoystickButton climbReady_held_10;
    public Joystick driverR;
    public JoystickButton intakeCube_whileHeld_1;
    public JoystickButton defense_release_1;
    public JoystickButton intakeCube_whileHeld_2;
    public JoystickButton switchShot_release_2;
    public JoystickButton switchDropoff_3;
    public JoystickButton scaleMidDropoff_6;
    public JoystickButton scaleDropoffRear_5;
    public JoystickButton scaleTallDropoff_4;
    public JoystickButton sensorLessPickupDown_7;
    public JoystickButton sensorlessPickupUp_7;
    public JoystickButton killAll_8;
    public JoystickButton powerUpDropOff_9;
    public JoystickButton lowerHand_10;
    public Joystick armGamePad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //TODO Allen, reassign climb buttons to driver
    
    //public POVButton powerupDropoff1;
    //public POVButton powerupDropoff2;
    public BBPOVButton taller;
    public BBPOVButton shorter;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        armGamePad = new Joystick(2);
        
        driverR = new Joystick(1);
        
        driverL = new Joystick(0);


        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putData("ResetPosition", new ResetPosition());
        SmartDashboard.putData("TankDrive", new TankDrive());
        SmartDashboard.putData("CheesyDrive", new CheesyDrive());
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverL() {
        return driverL;
    }

    public Joystick getDriverR() {
        return driverR;
    }

    public Joystick getarmGamePad() {
        return armGamePad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

